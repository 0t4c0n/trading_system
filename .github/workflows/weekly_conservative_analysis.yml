# .github/workflows/weekly_conservative_analysis.yml
name: Enhanced Conservative Stock Analysis with Trading Levels

on:
  schedule:
    # S√°bados a las 10:00 AM Espa√±a (9:00 AM UTC)
    - cron: '0 9 * * 6'
  workflow_dispatch:  # Permitir ejecuci√≥n manual

# PERMISOS NECESARIOS PARA GITHUB PAGES Y COMMITS
permissions:
  contents: write
  pages: write
  id-token: write

# Asegurar que solo un workflow corra a la vez
concurrency:
  group: "enhanced-conservative-analysis"
  cancel-in-progress: false

jobs:
  enhanced-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 150  # 2.5 horas para an√°lisis completo
    
    # Configurar entorno para GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Historial completo para an√°lisis de consistencia
        
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache dependencies mejorado
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-enhanced-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-enhanced-
          ${{ runner.os }}-pip-
        
    - name: Instalar dependencias
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verificar archivos de configuraci√≥n y estado del historial
      run: |
        echo "=== VERIFICANDO CONFIGURACION MEJORADA CON HISTORIAL ==="
        if [ ! -f "current_portfolio.json" ]; then
          echo "ERROR: current_portfolio.json no encontrado"
          exit 1
        fi
        echo "‚úÖ Configuraci√≥n verificada"
        
        # Verificar estado del historial
        if [ -d "historical_data" ]; then
          hist_count=$(ls historical_data/ 2>/dev/null | wc -l)
          echo "üìö Archivos hist√≥ricos disponibles: $hist_count"
        else
          echo "‚ÑπÔ∏è  Primera ejecuci√≥n - se crear√° historial autom√°ticamente"
        fi
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Configurar variables de entorno para an√°lisis mejorado
      run: |
        echo "REPORT_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
        echo "ANALYSIS_START_TIME=$(date -u +%H:%M)" >> $GITHUB_ENV
        echo "ENHANCED_MODE=true" >> $GITHUB_ENV
        echo "AUTO_HISTORY=true" >> $GITHUB_ENV
        
    - name: 1. Screening conservador mejorado con historial autom√°tico
      run: |
        echo "STEP 1: Screening completo 3,000+ acciones con gesti√≥n autom√°tica de historial..."
        echo "El sistema archivar√° autom√°ticamente resultados anteriores (si existen)"
        echo "Tiempo estimado: 15-25 minutos para an√°lisis completo"
        
        python conservative_screener.py
        
        if [ -f "weekly_screening_results.json" ]; then
          echo "SUCCESS: Screening completado con gesti√≥n autom√°tica de historial"
          # Verificar que el archivo contiene datos v√°lidos
          python -c "import json; data=json.load(open('weekly_screening_results.json')); print(f'Resultados: {len(data.get(\"detailed_results\", []))}')"
        else
          echo "ERROR: Error en screening conservador"
          exit 1
        fi
      env:
        PYTHONUNBUFFERED: 1
        
    - name: 2. Analizar consistencia hist√≥rica con archivos mejorados
      run: |
        echo "STEP 2: An√°lisis de consistencia (5 semanas) con gesti√≥n de historial..."
        echo "El sistema archivar√° autom√°ticamente el an√°lisis anterior (si existe)"
        echo "Buscar√° archivos hist√≥ricos en m√∫ltiples formatos para m√°xima compatibilidad"
        
        python consistency_analyzer.py
        
        if [ -f "consistency_analysis.json" ]; then
          echo "SUCCESS: An√°lisis de consistencia completado con gesti√≥n de historial"
          python verify_consistency.py
        else
          echo "ERROR: Error en an√°lisis de consistencia"
          exit 1
        fi
      env:
        PYTHONUNBUFFERED: 1
        
    - name: 3. Generar recomendaciones de rotaci√≥n con historial
      run: |
        echo "STEP 3: Recomendaciones de rotaci√≥n con an√°lisis multifactorial y gesti√≥n de historial..."
        echo "El sistema archivar√° autom√°ticamente las recomendaciones anteriores (si existen)"
        
        python rotation_recommender.py
        
        if [ -f "rotation_recommendations.json" ]; then
          echo "SUCCESS: Recomendaciones de rotaci√≥n completadas con gesti√≥n de historial"
          python verify_rotation.py
        else
          echo "ERROR: Error en recomendaciones de rotaci√≥n"
          exit 1
        fi
      env:
        PYTHONUNBUFFERED: 1
        
    - name: 4. Crear reporte semanal mejorado con historial
      run: |
        echo "STEP 4: Generando reporte semanal mejorado con niveles de trading y gesti√≥n de historial..."
        echo "El sistema gestionar√° autom√°ticamente el historial de reportes"
        
        python create_weekly_report.py
        
        echo "Verificando reportes generados..."
        if [ -f "docs/data.json" ]; then
          echo "SUCCESS: Dashboard data.json generado"
          python verify_dashboard.py
        else
          echo "ERROR: Error generando dashboard data"
          exit 1
        fi
        
        # Verificar reportes Markdown
        ENHANCED_REPORT=$(ls ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | head -1)
        REGULAR_REPORT=$(ls WEEKLY_REPORT_*.md 2>/dev/null | head -1)
        
        if [ -n "$ENHANCED_REPORT" ]; then
          echo "SUCCESS: Reporte mejorado generado: $ENHANCED_REPORT"
        elif [ -n "$REGULAR_REPORT" ]; then
          echo "SUCCESS: Reporte regular generado: $REGULAR_REPORT"
        else
          echo "WARNING: No se gener√≥ reporte Markdown (puede ser normal)"
        fi
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Verificar archivos generados y calidad con historial
      run: |
        python verify_generated_files.py
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Configurar Git para commits autom√°ticos
      run: |
        git config --global user.name 'Enhanced Conservative Bot'
        git config --global user.email 'actions@github.com'
        
    - name: Generar mensaje de commit inteligente
      run: |
        python generate_commit_message.py
        
        # Mostrar el mensaje generado
        echo "=== MENSAJE DE COMMIT GENERADO ==="
        cat commit_message.txt
        echo "================================="
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Commit y push de resultados con historial autom√°tico
      run: |
        # Verificar si hay cambios
        if git diff --quiet && git diff --staged --quiet; then
          echo "Sin cambios para commitear"
        else
          # A√±adir archivos principales
          git add weekly_screening_results.json
          git add consistency_analysis.json  
          git add rotation_recommendations.json
          git add docs/data.json
          
          # A√±adir reportes si existen
          git add ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null || true
          git add WEEKLY_REPORT_*.md 2>/dev/null || true
          
          # A√±adir historial si existe
          git add historical_data/ 2>/dev/null || true
          
          # Commit con mensaje personalizado
          if [ -f "commit_message.txt" ]; then
            git commit -F commit_message.txt
          else
            git commit -m "Enhanced Weekly Analysis $(date +%Y-%m-%d) - Auto History"
          fi
          
          git push
          echo "SUCCESS: Resultados commiteados con historial autom√°tico"
        fi
        
    - name: Configurar GitHub Pages
      uses: actions/configure-pages@v5
      
    - name: Subir artefactos para Pages
      uses: actions/upload-pages-artifact@v1
      with:
        path: './docs'
        
    - name: Desplegar a GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v3
      
    - name: Resumen final con historial y m√©tricas
      run: |
        echo "üéâ ===== AN√ÅLISIS MEJORADO COMPLETADO CON √âXITO ====="
        echo "üïê Iniciado: $ANALYSIS_START_TIME UTC"
        echo "üïê Finalizado: $(date -u +%H:%M) UTC"
        echo ""
        echo "üìä ARCHIVOS GENERADOS:"
        ls -la *.json *.md 2>/dev/null || echo "Sin archivos markdown"
        echo ""
        echo "üåê DASHBOARD: ${{ steps.deployment.outputs.page_url }}"
        echo ""
        echo "üìö GESTI√ìN DE HISTORIAL:"
        if [ -d "historical_data" ]; then
          echo "‚úÖ Historial autom√°tico funcionando"
          echo "üìÅ Archivos hist√≥ricos: $(ls historical_data/ 2>/dev/null | wc -l)"
        else
          echo "‚ÑπÔ∏è  Historial se crear√° en pr√≥ximas ejecuciones"
        fi
        echo ""
        echo "üîÑ Pr√≥xima ejecuci√≥n: S√°bados 10:00 AM Espa√±a"
        echo "‚ö° Ejecuci√≥n manual disponible en Actions tab"
        echo "=============================================="