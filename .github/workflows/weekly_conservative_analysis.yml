# .github/workflows/enhanced_conservative_analysis.yml
name: Enhanced Conservative Stock Analysis with Trading Levels

on:
  schedule:
    # S√°bados a las 10:00 AM Espa√±a (9:00 AM UTC)
    - cron: '0 9 * * 6'
  workflow_dispatch:  # Permitir ejecuci√≥n manual

# PERMISOS NECESARIOS PARA GITHUB PAGES Y COMMITS
permissions:
  contents: write
  pages: write
  id-token: write

# Asegurar que solo un workflow corra a la vez
concurrency:
  group: "enhanced-conservative-analysis"
  cancel-in-progress: false

jobs:
  enhanced-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 150  # 2.5 horas para an√°lisis completo
    
    # Configurar entorno para GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Historial completo para an√°lisis de consistencia
        
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache dependencies mejorado
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-enhanced-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-enhanced-
          ${{ runner.os }}-pip-
        
    - name: Instalar dependencias
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verificar archivos de configuraci√≥n
      run: |
        echo "=== VERIFICANDO CONFIGURACI√ìN MEJORADA ==="
        if [ ! -f "current_portfolio.json" ]; then
          echo "‚ö†Ô∏è current_portfolio.json no encontrado - se crear√° ejemplo"
        else
          echo "‚úì current_portfolio.json encontrado"
          echo "Posiciones actuales:"
          python3 -c "
import json
try:
    with open('current_portfolio.json', 'r') as f:
        data = json.load(f)
    positions = list(data.get('positions', {}).keys())
    print(f'üìÇ {len(positions)} posiciones: {positions}')
    print(f'üí∞ Cash disponible: ${data.get(\"cash\", 0):,.2f}')
except Exception as e:
    print(f'‚ùå Error leyendo portfolio: {e}')
          "
        fi
        
        echo ""
        echo "=== ARCHIVOS HIST√ìRICOS ==="
        ls -la weekly_screening_results*.json enhanced_screening_results*.json || echo "Sin historial de screening"
        ls -la consistency_analysis*.json rotation_recommendations*.json || echo "Sin historial de an√°lisis"
        
        echo ""
        echo "=== VERIFICANDO SCRIPTS MEJORADOS ==="
        for script in "conservative_screener.py" "consistency_analyzer.py" "rotation_recommender.py" "create_weekly_report.py"; do
          if [ -f "$script" ]; then
            echo "‚úì $script encontrado"
          else
            echo "‚ùå $script NO ENCONTRADO"
          fi
        done
        
    - name: 1. Ejecutar screening conservador mejorado
      run: |
        echo "üîç PASO 1: Screening conservador mejorado con niveles de trading..."
        echo "Iniciando an√°lisis de 3000+ acciones con c√°lculo din√°mico de stop-loss y take-profit"
        
        # Usar screener mejorado si existe, sino el original
        if [ -f "enhanced_conservative_screener.py" ]; then
          echo "Usando screener mejorado..."
          python enhanced_conservative_screener.py
        else
          echo "Usando screener original..."
          python conservative_screener.py
        fi
        
        echo "Verificando resultados del screening..."
        if [ -f "weekly_screening_results.json" ]; then
          echo "‚úÖ Screening completado exitosamente"
          python3 -c "
import json
with open('weekly_screening_results.json', 'r') as f:
    data = json.load(f)
results = data.get('detailed_results', [])
print(f'üìä {len(results)} acciones pasaron filtros conservadores')
if results:
    avg_rr = sum(r.get('risk_reward_ratio', 0) for r in results) / len(results)
    print(f'‚öñÔ∏è Risk/Reward promedio: {avg_rr:.1f}:1')
    top_5 = [r['symbol'] for r in results[:5]]
    print(f'üèÜ Top 5: {top_5}')
          "
        else
          echo "‚ùå Error en screening - archivo de resultados no encontrado"
          exit 1
        fi
      env:
        PYTHONUNBUFFERED: 1
        
    - name: 2. Analizar consistencia hist√≥rica
      run: |
        echo "üìä PASO 2: An√°lisis de consistencia (5 semanas) con scoring avanzado..."
        python consistency_analyzer.py
        
        if [ -f "consistency_analysis.json" ]; then
          echo "‚úÖ An√°lisis de consistencia completado"
          python3 -c "
import json
with open('consistency_analysis.json', 'r') as f:
    data = json.load(f)
stats = data.get('summary_stats', {})
print(f'üèÜ Consistent Winners: {stats.get(\"consistent_winners_count\", 0)}')
print(f'üíé Strong Candidates: {stats.get(\"strong_candidates_count\", 0)}')
print(f'üå± Emerging Opportunities: {stats.get(\"emerging_count\", 0)}')
          "
        else
          echo "‚ùå Error en an√°lisis de consistencia"
          exit 1
        fi
      env:
        PYTHONUNBUFFERED: 1
        
    - name: 3. Generar recomendaciones avanzadas de rotaci√≥n
      run: |
        echo "üéØ PASO 3: Recomendaciones de rotaci√≥n con an√°lisis multifactorial..."
        
        # Usar rotation recommender mejorado si existe
        if [ -f "advanced_rotation_recommender.py" ]; then
          echo "Usando rotation recommender avanzado..."
          python advanced_rotation_recommender.py
        else
          echo "Usando rotation recommender original..."
          python rotation_recommender.py
        fi
        
        if [ -f "rotation_recommendations.json" ]; then
          echo "‚úÖ Recomendaciones de rotaci√≥n completadas"
          python3 -c "
import json
with open('rotation_recommendations.json', 'r') as f:
    data = json.load(f)
action = data.get('action_summary', {}).get('overall_action', 'NO_ACTION')
strong_buys = len(data.get('action_summary', {}).get('strong_buys', []))
exits = len(data.get('action_summary', {}).get('consider_exits', [])) + len(data.get('action_summary', {}).get('urgent_exits', []))
print(f'‚ö° Acci√≥n general: {action}')
print(f'üî• Compras fuertes recomendadas: {strong_buys}')
print(f'‚ö†Ô∏è Salidas a considerar: {exits}')
if data.get('analysis_type') == 'advanced_multifactor':
    print('üöÄ An√°lisis multifactorial avanzado completado')
          "
        else
          echo "‚ùå Error en recomendaciones de rotaci√≥n"
          exit 1
        fi
      env:
        PYTHONUNBUFFERED: 1
        
    - name: 4. Crear reporte semanal mejorado
      run: |
        echo "üìã PASO 4: Generando reporte semanal mejorado con niveles de trading..."
        
        # Usar generador de reportes mejorado si existe
        if [ -f "enhanced_report_generator.py" ]; then
          echo "Usando generador de reportes mejorado..."
          python enhanced_report_generator.py
        else
          echo "Usando generador de reportes original..."
          python create_weekly_report.py
        fi
        
        echo "Verificando reportes generados..."
        if [ -f "docs/data.json" ]; then
          echo "‚úÖ Dashboard data.json generado"
          python3 -c "
import json
with open('docs/data.json', 'r') as f:
    data = json.load(f)
analysis_type = data.get('analysis_type', 'standard')
top_picks = len(data.get('top_picks', []))
print(f'üìä Tipo de an√°lisis: {analysis_type}')
print(f'üéØ Top picks generados: {top_picks}')
if 'trading_metrics' in data:
    metrics = data['trading_metrics']
    print(f'‚öñÔ∏è Avg R/R: {metrics.get(\"avg_risk_reward\", 0):.1f}:1')
    print(f'üìà Oportunidades alta calidad: {metrics.get(\"high_quality_count\", 0)}')
          "
        else
          echo "‚ùå Error generando dashboard data"
          exit 1
        fi
        
        # Verificar reportes Markdown
        ENHANCED_REPORT=$(ls ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | head -1)
        REGULAR_REPORT=$(ls WEEKLY_REPORT_*.md 2>/dev/null | head -1)
        
        if [ -n "$ENHANCED_REPORT" ]; then
          echo "‚úÖ Reporte mejorado generado: $ENHANCED_REPORT"
        elif [ -n "$REGULAR_REPORT" ]; then
          echo "‚úÖ Reporte regular generado: $REGULAR_REPORT"
        else
          echo "‚ö†Ô∏è No se gener√≥ reporte Markdown"
        fi
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Verificar archivos generados y calidad
      run: |
        echo "=== VERIFICACI√ìN FINAL DE ARCHIVOS ==="
        
        # Archivos principales
        for file in "weekly_screening_results.json" "consistency_analysis.json" "rotation_recommendations.json" "docs/data.json"; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file")
            echo "‚úÖ $file (${size} bytes)"
          else
            echo "‚ùå $file FALTANTE"
          fi
        done
        
        # Verificar calidad de datos
        echo ""
        echo "=== VERIFICACI√ìN DE CALIDAD ==="
        python3 -c "
import json
import os

def check_file_quality(filename, min_size=100):
    if not os.path.exists(filename):
        print(f'‚ùå {filename}: No existe')
        return False
    
    size = os.path.getsize(filename)
    if size < min_size:
        print(f'‚ö†Ô∏è {filename}: Muy peque√±o ({size} bytes)')
        return False
    
    try:
        with open(filename, 'r') as f:
            data = json.load(f)
        print(f'‚úÖ {filename}: JSON v√°lido ({size} bytes)')
        return True
    except Exception as e:
        print(f'‚ùå {filename}: JSON inv√°lido - {e}')
        return False

# Verificar archivos cr√≠ticos
files_ok = 0
files_ok += check_file_quality('weekly_screening_results.json', 1000)
files_ok += check_file_quality('consistency_analysis.json', 500)
files_ok += check_file_quality('rotation_recommendations.json', 500)
files_ok += check_file_quality('docs/data.json', 1000)

print(f'\\nüìä Resumen: {files_ok}/4 archivos OK')
if files_ok < 3:
    print('‚ùå CALIDAD INSUFICIENTE - Revisar logs')
    exit(1)
else:
    print('‚úÖ CALIDAD ACEPTABLE')
        "
        
        # Mostrar estad√≠sticas finales
        echo ""
        echo "=== ESTAD√çSTICAS FINALES ==="
        python3 -c "
import json
from datetime import datetime

# Cargar datos principales
try:
    with open('weekly_screening_results.json', 'r') as f:
        screening = json.load(f)
    with open('consistency_analysis.json', 'r') as f:
        consistency = json.load(f)
    with open('rotation_recommendations.json', 'r') as f:
        rotation = json.load(f)
        
    # Estad√≠sticas
    total_screened = len(screening.get('detailed_results', []))
    winners = consistency.get('summary_stats', {}).get('consistent_winners_count', 0)
    action = rotation.get('action_summary', {}).get('overall_action', 'NO_ACTION')
    
    print(f'üìä Total filtradas: {total_screened}')
    print(f'üèÜ Consistent winners: {winners}')
    print(f'‚ö° Acci√≥n requerida: {action}')
    print(f'üìÖ An√°lisis completado: {datetime.now().strftime(\"%Y-%m-%d %H:%M UTC\")}')
    
    # Verificar mejoras
    analysis_type = rotation.get('analysis_type', 'standard')
    if analysis_type == 'advanced_multifactor':
        print('üöÄ AN√ÅLISIS AVANZADO ACTIVADO')
    
    if 'trading_metrics' in screening:
        print('üìà NIVELES DE TRADING CALCULADOS')
        
except Exception as e:
    print(f'‚ö†Ô∏è Error en estad√≠sticas finales: {e}')
        "
        
    - name: Crear resumen de commit mejorado
      run: |
        echo "=== CREANDO RESUMEN DE COMMIT MEJORADO ==="
        
        REPORT_DATE=$(date +%Y-%m-%d)
        
        # Extraer informaci√≥n clave
        python3 -c "
import json
from datetime import datetime

try:
    # Cargar datos
    with open('weekly_screening_results.json', 'r') as f:
        screening = json.load(f)
    with open('consistency_analysis.json', 'r') as f:
        consistency = json.load(f)
    with open('rotation_recommendations.json', 'r') as f:
        rotation = json.load(f)
    
    # Extraer informaci√≥n
    results = screening.get('detailed_results', [])
    top_symbols = [r['symbol'] for r in results[:5]]
    winners_count = consistency.get('summary_stats', {}).get('consistent_winners_count', 0)
    action = rotation.get('action_summary', {}).get('overall_action', 'NO_ACTION')
    
    # M√©tricas de trading si est√°n disponibles
    trading_metrics = ''
    if results:
        avg_rr = sum(r.get('risk_reward_ratio', 0) for r in results) / len(results)
        high_quality = len([r for r in results if r.get('risk_reward_ratio', 0) > 2.5])
        trading_metrics = f' | Avg R/R: {avg_rr:.1f}:1 | High Quality: {high_quality}'
    
    # Detectar tipo de an√°lisis
    analysis_type = 'Enhanced' if rotation.get('analysis_type') == 'advanced_multifactor' else 'Standard'
    
    # Crear mensaje
    with open('commit_message.txt', 'w') as f:
        f.write(f'üìà {analysis_type} Weekly Analysis $REPORT_DATE\\n\\n')
        f.write(f'üèÜ Top 5: {', '.join(top_symbols) if top_symbols else 'None'}\\n')
        f.write(f'üéØ Consistent Winners: {winners_count}\\n')
        f.write(f'‚ö° Action Required: {action}\\n')
        f.write(f'üìä Total Filtered: {len(results)}{trading_metrics}\\n\\n')
        f.write(f'ü§ñ Enhanced Trading Bot with Levels - {datetime.now().strftime(\"%H:%M UTC\")}\\n')
    
    print('‚úÖ Commit message generado')
    
except Exception as e:
    print(f'‚ùå Error generando commit message: {e}')
    # Fallback message
    with open('commit_message.txt', 'w') as f:
        f.write(f'üìä Weekly Analysis $REPORT_DATE\\n\\nGenerated by Enhanced Conservative Trading Bot\\n')
        " REPORT_DATE="$REPORT_DATE"
        
        cat commit_message.txt
        
    - name: Commit resultados semanales mejorados
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message_file: commit_message.txt
        file_pattern: 'weekly_screening_results.json consistency_analysis.json rotation_recommendations.json docs/data.json *WEEKLY_REPORT*.md enhanced_screening_results*.json'
        
    - name: Configurar Pages
      uses: actions/configure-pages@v4
      
    - name: Subir artefacto de Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Desplegar a GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Limpiar archivos antiguos
      run: |
        echo "üßπ Limpiando archivos antiguos..."
        
        # Mantener solo los √∫ltimos 5 archivos de screening completo
        ls -t enhanced_screening_results*.json 2>/dev/null | tail -n +6 | xargs -r rm -f
        ls -t screening_results_full*.json 2>/dev/null | tail -n +6 | xargs -r rm -f
        
        # Limpiar reportes antiguos (mantener √∫ltimos 3)
        ls -t ENHANCED_WEEKLY_REPORT*.md 2>/dev/null | tail -n +4 | xargs -r rm -f
        ls -t WEEKLY_REPORT*.md 2>/dev/null | tail -n +4 | xargs -r rm -f
        
        echo "‚úì Limpieza completada"
        
    - name: Resumen final mejorado
      run: |
        echo "================================="
        echo "‚úÖ AN√ÅLISIS SEMANAL MEJORADO COMPLETADO"
        echo "================================="
        echo "Fecha: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        # Verificar tipo de an√°lisis realizado
        if [ -f "rotation_recommendations.json" ]; then
          ANALYSIS_TYPE=$(python3 -c "
import json
try:
    with open('rotation_recommendations.json', 'r') as f:
        data = json.load(f)
    print(data.get('analysis_type', 'standard'))
except:
    print('standard')
          ")
          echo "üî¨ Tipo de an√°lisis: $ANALYSIS_TYPE"
        fi
        
        # Verificar caracter√≠sticas activadas
        if [ -f "docs/data.json" ]; then
          python3 -c "
import json
try:
    with open('docs/data.json', 'r') as f:
        data = json.load(f)
    
    features = []
    if 'trading_metrics' in data:
        features.append('Niveles de Trading')
    if data.get('analysis_type') == 'enhanced_conservative_with_trading_levels':
        features.append('An√°lisis Avanzado')
    if any('take_profit' in str(pick) for pick in data.get('top_picks', [])):
        features.append('Stop/Target Din√°micos')
    
    if features:
        print('üöÄ Caracter√≠sticas activadas: ' + ', '.join(features))
    else:
        print('üìä An√°lisis est√°ndar completado')
        
except Exception as e:
    print('üìä An√°lisis completado (verificaci√≥n de caracter√≠sticas fall√≥)')
          "
        fi
        
        echo ""
        echo "üìä Dashboard: ${{ steps.deployment.outputs.page_url }}"
        echo "üìã Reportes: Guardados en repositorio"
        echo "üîÑ Pr√≥ximo an√°lisis: $(date -d '+7 days' '+%Y-%m-%d 10:00 Espa√±a')"
        echo ""
        echo "üí° NUEVAS CARACTER√çSTICAS:"
        echo "   ‚úÖ Niveles de stop-loss y take-profit din√°micos"
        echo "   ‚úÖ Risk/Reward ratios calculados"
        echo "   ‚úÖ Scoring multifactorial avanzado"
        echo "   ‚úÖ Gesti√≥n activa de posiciones"
        echo "   ‚úÖ Dashboard mejorado con niveles"
        echo "================================="