# .github/workflows/weekly_conservative_analysis.yml
name: Weekly Conservative Stock Analysis

on:
  schedule:
    # Lunes a las 2:00 PM UTC (9:00 AM EST / 3:00 PM Espa√±a)
    - cron: '0 14 * * 1'
  workflow_dispatch:  # Permitir ejecuci√≥n manual

# PERMISOS NECESARIOS PARA GITHUB PAGES Y COMMITS
permissions:
  contents: write
  pages: write
  id-token: write

# Asegurar que solo un workflow corra a la vez
concurrency:
  group: "conservative-analysis"
  cancel-in-progress: false

jobs:
  conservative-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # 1.5 horas m√°ximo
    
    # Configurar entorno para GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Historial completo para an√°lisis de consistencia
        
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Instalar dependencias
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verificar archivos de configuraci√≥n
      run: |
        echo "=== VERIFICANDO CONFIGURACI√ìN ==="
        if [ ! -f "current_portfolio.json" ]; then
          echo "‚ö†Ô∏è current_portfolio.json no encontrado - se crear√° ejemplo"
        else
          echo "‚úì current_portfolio.json encontrado"
          cat current_portfolio.json
        fi
        
        echo ""
        echo "=== ARCHIVOS HIST√ìRICOS ==="
        ls -la weekly_screening_results*.json || echo "Sin historial de screening"
        ls -la consistency_analysis*.json || echo "Sin historial de consistencia"
        
    - name: 1. Ejecutar screening conservador
      run: |
        echo "üîç PASO 1: Screening conservador de acciones..."
        python conservative_screener.py
      env:
        PYTHONUNBUFFERED: 1
        
    - name: 2. Analizar consistencia hist√≥rica
      run: |
        echo "üìä PASO 2: An√°lisis de consistencia (5 semanas)..."
        python consistency_analyzer.py
      env:
        PYTHONUNBUFFERED: 1
        
    - name: 3. Generar recomendaciones de rotaci√≥n
      run: |
        echo "üéØ PASO 3: Recomendaciones de rotaci√≥n..."
        python rotation_recommender.py
      env:
        PYTHONUNBUFFERED: 1
        
    - name: 4. Crear reporte semanal completo
      run: |
        echo "üìã PASO 4: Generando reporte semanal..."
        python create_weekly_report.py
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Verificar archivos generados
      run: |
        echo "=== ARCHIVOS GENERADOS ==="
        echo "Screening results:"
        ls -la weekly_screening_results.json screening_results_full_*.json || echo "Sin resultados de screening"
        
        echo ""
        echo "An√°lisis:"
        ls -la consistency_analysis.json rotation_recommendations.json || echo "Sin an√°lisis"
        
        echo ""
        echo "Reportes:"
        ls -la WEEKLY_REPORT_*.md docs/data.json || echo "Sin reportes"
        
        echo ""
        echo "=== CONTENIDO DATA.JSON (primeras l√≠neas) ==="
        if [ -f "docs/data.json" ]; then
          head -20 docs/data.json
          echo "Tama√±o: $(stat -c%s docs/data.json) bytes"
        else
          echo "‚ùå docs/data.json no encontrado"
        fi
        
    - name: Crear resumen de commit
      run: |
        echo "=== CREANDO RESUMEN DE COMMIT ==="
        
        # Extraer informaci√≥n clave para el commit
        REPORT_DATE=$(date +%Y-%m-%d)
        
        # Contar resultados
        TOP_STOCKS=""
        CONSISTENT_COUNT=0
        ACTION_REQUIRED="NO_ACTION"
        
        if [ -f "weekly_screening_results.json" ]; then
          TOP_STOCKS=$(python3 -c "
import json
try:
    with open('weekly_screening_results.json', 'r') as f:
        data = json.load(f)
    symbols = [r['symbol'] for r in data.get('detailed_results', [])[:5]]
    print(', '.join(symbols) if symbols else 'None')
except:
    print('Error')
          ")
        fi
        
        if [ -f "consistency_analysis.json" ]; then
          CONSISTENT_COUNT=$(python3 -c "
import json
try:
    with open('consistency_analysis.json', 'r') as f:
        data = json.load(f)
    print(data.get('summary_stats', {}).get('consistent_winners_count', 0))
except:
    print(0)
          ")
        fi
        
        if [ -f "rotation_recommendations.json" ]; then
          ACTION_REQUIRED=$(python3 -c "
import json
try:
    with open('rotation_recommendations.json', 'r') as f:
        data = json.load(f)
    print(data.get('action_summary', {}).get('overall_action', 'NO_ACTION'))
except:
    print('NO_ACTION')
          ")
        fi
        
        # Crear mensaje de commit informativo
        echo "üìä Weekly Analysis $REPORT_DATE" > commit_message.txt
        echo "" >> commit_message.txt
        echo "üèÜ Top stocks: $TOP_STOCKS" >> commit_message.txt
        echo "üéØ Consistent winners: $CONSISTENT_COUNT" >> commit_message.txt
        echo "‚ö° Action required: $ACTION_REQUIRED" >> commit_message.txt
        echo "" >> commit_message.txt
        echo "Generated by Conservative Trading Bot" >> commit_message.txt
        
        cat commit_message.txt
        
    - name: Commit resultados semanales
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message_file: commit_message.txt
        file_pattern: 'weekly_screening_results.json consistency_analysis.json rotation_recommendations.json WEEKLY_REPORT_*.md docs/data.json screening_results_full_*.json'
        
    - name: Configurar Pages
      uses: actions/configure-pages@v4
      
    - name: Subir artefacto de Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Desplegar a GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Limpiar archivos temporales antiguos
      run: |
        echo "üßπ Limpiando archivos antiguos..."
        
        # Mantener solo los √∫ltimos 5 archivos de screening completo
        ls -t screening_results_full_*.json | tail -n +6 | xargs -r rm -f
        
        echo "‚úì Limpieza completada"
        
    - name: Resumen final
      run: |
        echo "================================="
        echo "‚úÖ AN√ÅLISIS SEMANAL COMPLETADO"
        echo "================================="
        echo "Fecha: $(date)"
        echo "Duraci√≥n: ${{ job.duration || 'N/A' }}"
        echo ""
        echo "üìä Dashboard disponible en: ${{ steps.deployment.outputs.page_url }}"
        echo "üìã Reportes generados en el repositorio"
        echo ""
        echo "üîÑ Pr√≥ximo an√°lisis: $(date -d '+7 days' '+%Y-%m-%d %H:%M UTC')"
        echo "================================="
