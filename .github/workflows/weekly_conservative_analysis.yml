# .github/workflows/weekly_conservative_analysis.yml
name: Enhanced Conservative Stock Analysis with Trading Levels

on:
  schedule:
    # S√°bados a las 10:00 AM Espa√±a (9:00 AM UTC)
    - cron: '0 9 * * 6'
  workflow_dispatch:  # Permitir ejecuci√≥n manual

# PERMISOS NECESARIOS PARA GITHUB PAGES Y COMMITS
permissions:
  contents: write
  pages: write
  id-token: write

# Asegurar que solo un workflow corra a la vez
concurrency:
  group: "enhanced-conservative-analysis"
  cancel-in-progress: false

jobs:
  enhanced-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 150  # 2.5 horas para an√°lisis completo
    
    # Configurar entorno para GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Historial completo para an√°lisis de consistencia
        
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache dependencies mejorado
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-enhanced-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-enhanced-
          ${{ runner.os }}-pip-
        
    - name: Instalar dependencias
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verificar archivos de configuraci√≥n y estado del historial
      run: |
        echo "=== VERIFICANDO CONFIGURACION MEJORADA CON HISTORIAL ==="
        if [ ! -f "current_portfolio.json" ]; then
          echo "ERROR: current_portfolio.json no encontrado"
          exit 1
        fi
        echo "‚úÖ Configuraci√≥n verificada"
        
        # Verificar estado del historial existente
        echo "üìö Archivos hist√≥ricos existentes:"
        ls -la *_*.json 2>/dev/null | grep -E "(weekly_screening_results_|consistency_analysis_|rotation_recommendations_)" || echo "   No hay archivos hist√≥ricos previos"
        ls -la ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null || echo "   No hay reportes hist√≥ricos previos"
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Configurar variables de entorno para an√°lisis mejorado
      run: |
        echo "REPORT_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
        echo "ANALYSIS_START_TIME=$(date -u +%H:%M)" >> $GITHUB_ENV
        echo "ENHANCED_MODE=true" >> $GITHUB_ENV
        echo "AUTO_HISTORY=true" >> $GITHUB_ENV
        
    - name: 1. Screening conservador mejorado con historial autom√°tico
      run: |
        echo "STEP 1: Screening completo 3,000+ acciones con gesti√≥n autom√°tica de historial..."
        echo "El sistema archivar√° autom√°ticamente resultados anteriores (si existen)"
        echo "Tiempo estimado: 15-25 minutos para an√°lisis completo"
        
        python conservative_screener.py
        
        if [ -f "weekly_screening_results.json" ]; then
          echo "SUCCESS: Screening completado con gesti√≥n autom√°tica de historial"
          # Verificar que el archivo contiene datos v√°lidos
          python -c "import json; data=json.load(open('weekly_screening_results.json')); print(f'Resultados: {len(data.get(\"detailed_results\", []))}')"
        else
          echo "ERROR: Error en screening conservador"
          exit 1
        fi
      env:
        PYTHONUNBUFFERED: 1

    - name: 1.1. FORZAR creaci√≥n de archivo hist√≥rico de screening
      run: |
        echo "üîß FORZANDO creaci√≥n de archivo hist√≥rico de screening..."
        DATE_STAMP=$(date +%Y%m%d)
        
        if [ -f "weekly_screening_results.json" ]; then
          # Crear copia hist√≥rica con timestamp
          cp weekly_screening_results.json "weekly_screening_results_${DATE_STAMP}.json"
          echo "‚úÖ Archivo hist√≥rico creado: weekly_screening_results_${DATE_STAMP}.json"
          ls -la weekly_screening_results_${DATE_STAMP}.json
        else
          echo "‚ùå No se puede crear hist√≥rico - archivo principal no existe"
        fi
        
    - name: 2. Analizar consistencia hist√≥rica con archivos mejorados
      run: |
        echo "STEP 2: An√°lisis de consistencia (5 semanas) con gesti√≥n de historial..."
        echo "El sistema archivar√° autom√°ticamente el an√°lisis anterior (si existe)"
        echo "Buscar√° archivos hist√≥ricos en m√∫ltiples formatos para m√°xima compatibilidad"
        
        python consistency_analyzer.py
        
        if [ -f "consistency_analysis.json" ]; then
          echo "SUCCESS: An√°lisis de consistencia completado con gesti√≥n de historial"
          python verify_consistency.py
        else
          echo "ERROR: Error en an√°lisis de consistencia"
          exit 1
        fi
      env:
        PYTHONUNBUFFERED: 1

    - name: 2.1. FORZAR creaci√≥n de archivo hist√≥rico de consistencia
      run: |
        echo "üîß FORZANDO creaci√≥n de archivo hist√≥rico de consistencia..."
        DATE_STAMP=$(date +%Y%m%d)
        
        if [ -f "consistency_analysis.json" ]; then
          # Crear copia hist√≥rica con timestamp
          cp consistency_analysis.json "consistency_analysis_${DATE_STAMP}.json"
          echo "‚úÖ Archivo hist√≥rico creado: consistency_analysis_${DATE_STAMP}.json"
          ls -la consistency_analysis_${DATE_STAMP}.json
        else
          echo "‚ùå No se puede crear hist√≥rico - archivo principal no existe"
        fi
        
    - name: 3. Generar recomendaciones de rotaci√≥n con historial
      run: |
        echo "STEP 3: Recomendaciones de rotaci√≥n con an√°lisis multifactorial y gesti√≥n de historial..."
        echo "El sistema archivar√° autom√°ticamente las recomendaciones anteriores (si existen)"
        
        python rotation_recommender.py
        
        if [ -f "rotation_recommendations.json" ]; then
          echo "SUCCESS: Recomendaciones de rotaci√≥n completadas con gesti√≥n de historial"
          python verify_rotation.py
        else
          echo "ERROR: Error en recomendaciones de rotaci√≥n"
          exit 1
        fi
      env:
        PYTHONUNBUFFERED: 1

    - name: 3.1. FORZAR creaci√≥n de archivo hist√≥rico de rotaci√≥n
      run: |
        echo "üîß FORZANDO creaci√≥n de archivo hist√≥rico de rotaci√≥n..."
        DATE_STAMP=$(date +%Y%m%d)
        
        if [ -f "rotation_recommendations.json" ]; then
          # Crear copia hist√≥rica con timestamp
          cp rotation_recommendations.json "rotation_recommendations_${DATE_STAMP}.json"
          echo "‚úÖ Archivo hist√≥rico creado: rotation_recommendations_${DATE_STAMP}.json"
          ls -la rotation_recommendations_${DATE_STAMP}.json
        else
          echo "‚ùå No se puede crear hist√≥rico - archivo principal no existe"
        fi
        
    - name: 4. Crear reporte semanal mejorado con historial
      run: |
        echo "STEP 4: Generando reporte semanal mejorado con niveles de trading y gesti√≥n de historial..."
        echo "El sistema gestionar√° autom√°ticamente el historial de reportes"
        
        python create_weekly_report.py
        
        echo "Verificando reportes generados..."
        if [ -f "docs/data.json" ]; then
          echo "SUCCESS: Dashboard data.json generado"
          python verify_dashboard.py
        else
          echo "ERROR: Error generando dashboard data"
          exit 1
        fi
        
        # Verificar reportes Markdown
        ENHANCED_REPORT=$(ls ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | head -1)
        REGULAR_REPORT=$(ls WEEKLY_REPORT_*.md 2>/dev/null | head -1)
        
        if [ -n "$ENHANCED_REPORT" ]; then
          echo "SUCCESS: Reporte mejorado generado: $ENHANCED_REPORT"
        elif [ -n "$REGULAR_REPORT" ]; then
          echo "SUCCESS: Reporte regular generado: $REGULAR_REPORT"
        else
          echo "WARNING: No se gener√≥ reporte Markdown (puede ser normal)"
        fi
      env:
        PYTHONUNBUFFERED: 1
        
    - name: üîß DEBUG - Verificar archivos hist√≥ricos FORZADOS
      run: |
        echo "=== üîß VERIFICACI√ìN DEBUG DE ARCHIVOS HIST√ìRICOS FORZADOS ==="
        DATE_STAMP=$(date +%Y%m%d)
        
        echo "üìÅ Archivos con patr√≥n hist√≥rico esperado:"
        ls -la *_${DATE_STAMP}.json 2>/dev/null || echo "   ‚ùå No hay archivos con fecha de hoy"
        
        echo "üìÅ Todos los archivos hist√≥ricos (con fecha):"
        ls -la *_*.json 2>/dev/null | grep -v "weekly_screening_results.json" | head -10 || echo "   ‚ùå No hay archivos hist√≥ricos"
        
        echo "üìÅ Reportes hist√≥ricos:"
        ls -la ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | head -5 || echo "   ‚ùå No hay reportes hist√≥ricos"
        
        echo "üìä CONTEO TOTAL DESPU√âS DE FORZADO:"
        HIST_SCREENING=$(ls weekly_screening_results_*.json 2>/dev/null | wc -l)
        HIST_CONSISTENCY=$(ls consistency_analysis_*.json 2>/dev/null | wc -l)
        HIST_ROTATION=$(ls rotation_recommendations_*.json 2>/dev/null | wc -l)
        HIST_REPORTS=$(ls ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | wc -l)
        echo "   - Screening hist√≥ricos: $HIST_SCREENING"
        echo "   - Consistencia hist√≥ricos: $HIST_CONSISTENCY"  
        echo "   - Rotaci√≥n hist√≥ricos: $HIST_ROTATION"
        echo "   - Reportes hist√≥ricos: $HIST_REPORTS"
        
        TOTAL_HISTORICAL=$((HIST_SCREENING + HIST_CONSISTENCY + HIST_ROTATION + HIST_REPORTS))
        echo "   - TOTAL HIST√ìRICOS: $TOTAL_HISTORICAL"
        
        if [ $TOTAL_HISTORICAL -eq 0 ]; then
          echo "üö® CRITICAL: No se generaron archivos hist√≥ricos"
          exit 1
        else
          echo "‚úÖ SUCCESS: Se generaron $TOTAL_HISTORICAL archivos hist√≥ricos"
        fi
        
    - name: Verificar archivos generados y calidad con historial
      run: |
        python verify_generated_files.py
        
        echo ""
        echo "=== VERIFICACI√ìN DE ARCHIVOS HIST√ìRICOS GENERADOS ==="
        echo "üìÅ Archivos principales (actuales):"
        ls -la weekly_screening_results.json consistency_analysis.json rotation_recommendations.json docs/data.json 2>/dev/null || echo "   Algunos archivos principales faltantes"
        
        echo ""
        echo "üìö Archivos hist√≥ricos (con fecha):"
        ls -la weekly_screening_results_*.json 2>/dev/null | tail -3 || echo "   No hay archivos de screening hist√≥ricos"
        ls -la consistency_analysis_*.json 2>/dev/null | tail -3 || echo "   No hay archivos de consistencia hist√≥ricos"
        ls -la rotation_recommendations_*.json 2>/dev/null | tail -3 || echo "   No hay archivos de rotaci√≥n hist√≥ricos"
        ls -la ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | tail -3 || echo "   No hay reportes hist√≥ricos"
        
        echo ""
        echo "üìä Conteo total de archivos hist√≥ricos:"
        HIST_SCREENING=$(ls weekly_screening_results_*.json 2>/dev/null | wc -l)
        HIST_CONSISTENCY=$(ls consistency_analysis_*.json 2>/dev/null | wc -l)
        HIST_ROTATION=$(ls rotation_recommendations_*.json 2>/dev/null | wc -l)
        HIST_REPORTS=$(ls ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | wc -l)
        echo "   - Screening hist√≥ricos: $HIST_SCREENING"
        echo "   - Consistencia hist√≥ricos: $HIST_CONSISTENCY"
        echo "   - Rotaci√≥n hist√≥ricos: $HIST_ROTATION"
        echo "   - Reportes hist√≥ricos: $HIST_REPORTS"
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Configurar Git para commits autom√°ticos
      run: |
        git config --global user.name 'Enhanced Conservative Bot'
        git config --global user.email 'actions@github.com'
        
    - name: Generar mensaje de commit inteligente
      run: |
        python generate_commit_message.py
        
        # Mostrar el mensaje generado
        echo "=== MENSAJE DE COMMIT GENERADO ==="
        cat commit_message.txt
        echo "================================="
      env:
        PYTHONUNBUFFERED: 1
        
    - name: üîß COMMIT FORZADO con gesti√≥n de historial CORREGIDA
      run: |
        echo "=== üîß INICIANDO COMMIT FORZADO CON HISTORIAL ==="
        
        # A√±adir TODOS los archivos, incluyendo hist√≥ricos
        echo "üìÅ A√±adiendo archivos principales..."
        git add weekly_screening_results.json || echo "Skip weekly_screening_results.json"
        git add consistency_analysis.json || echo "Skip consistency_analysis.json"
        git add rotation_recommendations.json || echo "Skip rotation_recommendations.json"
        git add docs/data.json || echo "Skip docs/data.json"
        
        echo "üìö A√±adiendo archivos hist√≥ricos FORZADAMENTE..."
        git add weekly_screening_results_*.json || echo "No historic screening files"
        git add consistency_analysis_*.json || echo "No historic consistency files"
        git add rotation_recommendations_*.json || echo "No historic rotation files"
        git add ENHANCED_WEEKLY_REPORT_*.md || echo "No historic reports"
        git add WEEKLY_REPORT_*.md || echo "No regular reports"
        
        # Tambi√©n a√±adir cualquier otro archivo generado
        echo "üîß A√±adiendo otros archivos generados..."
        git add momentum_responsive_results_*.json || echo "No momentum files"
        git add ultra_conservative_results_*.json || echo "No ultra conservative files"
        
        echo "=== üîç VERIFICANDO ARCHIVOS A√ëADIDOS ==="
        git status --porcelain
        STAGED_FILES=$(git status --porcelain | wc -l)
        echo "Archivos en staging: $STAGED_FILES"
        
        if [ $STAGED_FILES -eq 0 ]; then
          echo "üö® FORZANDO A√ëADIR TODO CON ADD --ALL"
          git add --all
          git status --porcelain
          STAGED_FILES_ALL=$(git status --porcelain | wc -l)
          echo "Archivos despu√©s de --all: $STAGED_FILES_ALL"
        fi
        
        echo "=== üìù REALIZANDO COMMIT FORZADO ==="
        FINAL_STAGED=$(git status --porcelain | wc -l)
        if [ $FINAL_STAGED -gt 0 ]; then
          # Commit con mensaje personalizado
          if [ -f "commit_message.txt" ]; then
            git commit -F commit_message.txt
          else
            git commit -m "üîß FIXED: Enhanced Weekly Analysis + Forced History Management $(date +%Y-%m-%d)"
          fi
          
          echo "=== üöÄ PUSHING CAMBIOS ==="
          git push
          echo "‚úÖ SUCCESS: Archivos hist√≥ricos commiteados CORRECTAMENTE"
          
          echo "=== üìã RESUMEN DE ARCHIVOS COMMITEADOS ==="
          git show --name-only --pretty=format: HEAD | sort | head -20
        else
          echo "‚ùå CRITICAL: No hay archivos para commitear despu√©s de forzar"
          echo "Listando todos los archivos generados:"
          find . -name "*.json" -o -name "*.md" | grep -E "(weekly_screening|consistency|rotation|ENHANCED)" | head -10
          exit 1
        fi
        
    - name: Configurar GitHub Pages
      uses: actions/configure-pages@v5
      
    - name: Subir artefactos para Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Desplegar a GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: üéâ Resumen final con historial FORZADO y m√©tricas MEJORADO
      run: |
        echo "üéâ ===== AN√ÅLISIS MEJORADO COMPLETADO CON HISTORIAL FORZADO ====="
        echo "üïê Iniciado: $ANALYSIS_START_TIME UTC"
        echo "üïê Finalizado: $(date -u +%H:%M) UTC"
        echo ""
        echo "üìä ARCHIVOS PRINCIPALES GENERADOS:"
        ls -la *.json *.md 2>/dev/null | grep -E "(weekly_screening_results\.json|consistency_analysis\.json|rotation_recommendations\.json|ENHANCED_WEEKLY_REPORT_.*\.md)" || echo "Sin archivos principales"
        echo ""
        echo "üìö GESTI√ìN DE HISTORIAL FORZADA - CORREGIDA:"
        echo "üîß NUEVO: Archivos hist√≥ricos ahora se crean FORZADAMENTE despu√©s de cada paso"
        TOTAL_HISTORICAL=$(ls *_*.json ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | wc -l)
        echo "üìÅ Total archivos hist√≥ricos FORZADOS: $TOTAL_HISTORICAL"
        echo ""
        if [ $TOTAL_HISTORICAL -gt 0 ]; then
          echo "üìã Archivos hist√≥ricos FORZADOS generados:"
          ls -lt *_*.json ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | head -10
        fi
        echo ""
        echo "üåê DASHBOARD: ${{ steps.deployment.outputs.page_url }}"
        echo ""
        echo "üìà PR√ìXIMAS EJECUCIONES:"
        echo "üîÑ Pr√≥xima ejecuci√≥n: S√°bados 10:00 AM Espa√±a"
        echo "‚ö° Ejecuci√≥n manual disponible en Actions tab"
        echo "üìö Historial forzado: ‚úÖ IMPLEMENTADO Y FUNCIONANDO"
        echo "üîß Gesti√≥n hist√≥rica: PROACTIVA (crea archivos siempre)"
        echo "=============================================="