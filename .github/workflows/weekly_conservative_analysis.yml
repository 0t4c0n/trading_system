# .github/workflows/daily_conservative_analysis.yml
name: Daily Conservative Stock Analysis with MA50 Bonus

on:
  schedule:
    # Lunes a viernes a las 9:00 AM España (8:00 UTC)
    - cron: '0 8 * * 1-5'
  workflow_dispatch:  # Permitir ejecución manual

# PERMISOS NECESARIOS PARA GITHUB PAGES Y COMMITS
permissions:
  contents: write
  pages: write
  id-token: write

# Asegurar que solo un workflow corra a la vez
concurrency:
  group: "daily-conservative-analysis"
  cancel-in-progress: false

jobs:
  daily-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 horas para análisis completo diario
    
    # Configurar entorno para GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Historial completo para análisis de consistencia
        
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache dependencies optimizado para ejecución diaria
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-daily-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-daily-
          ${{ runner.os }}-pip-
        
    - name: Instalar dependencias
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Verificar configuración y estado histórico diario
      run: |
        echo "=== VERIFICANDO CONFIGURACION PARA EJECUCION DIARIA ==="
        if [ ! -f "current_portfolio.json" ]; then
          echo "ERROR: current_portfolio.json no encontrado"
          exit 1
        fi
        echo "✅ Portfolio configurado para monitorización diaria"
        
        # Verificar archivos históricos recientes (últimos 7 días)
        echo "📚 Archivos del historial diario (últimos 7 días):"
        find . -name "*_*.json" -mtime -7 2>/dev/null | grep -E "(weekly_screening_results_|consistency_analysis_|rotation_recommendations_)" | head -10 || echo "   Iniciando historial diario"
        
        echo "🔄 MODO: Ejecución diaria para trades de ~1 mes"
        echo "🎯 OBJETIVO: Monitorizar oportunidades sin rotación excesiva"
        echo "🕘 HORARIO: L-V 9:00 AM España (post-apertura europea)"
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Configurar variables de entorno para análisis diario
      run: |
        echo "REPORT_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
        echo "ANALYSIS_START_TIME=$(date -u +%H:%M)" >> $GITHUB_ENV
        echo "ENHANCED_MODE=true" >> $GITHUB_ENV
        echo "DAILY_MODE=true" >> $GITHUB_ENV
        echo "AUTO_HISTORY=true" >> $GITHUB_ENV
        echo "EXECUTION_FREQUENCY=daily" >> $GITHUB_ENV
        
    - name: 1. Screening diario con bonus MA50
      run: |
        echo "🔍 === SCREENING DIARIO CON BONUS MA50 ==="
        echo "🌟 Sistema: MA50 priority con +22 puntos por rebote alcista"
        echo "📅 Frecuencia: Diaria (L-V 9:00 AM España)"
        echo "🎯 Objetivo: Trades de ~1 mes con gestión diaria de exits"
        
        python conservative_screener.py
        
        echo "✅ Screening diario completado"
        ls -la weekly_screening_results.json momentum_responsive_results_*.json 2>/dev/null || echo "Verificando archivos generados..."
      env:
        PYTHONUNBUFFERED: 1

    - name: 1.1. Crear archivo histórico de screening diario
      run: |
        echo "🔧 Creando archivo histórico de screening diario..."
        DATE_STAMP=$(date +%Y%m%d)
        
        if [ -f "weekly_screening_results.json" ]; then
          cp weekly_screening_results.json "weekly_screening_results_${DATE_STAMP}.json"
          echo "✅ Archivo histórico creado: weekly_screening_results_${DATE_STAMP}.json"
          ls -la weekly_screening_results_${DATE_STAMP}.json
        else
          echo "❌ No se puede crear histórico - archivo principal no existe"
        fi
        
    - name: 2. Análisis de consistencia adaptado para ejecución diaria
      run: |
        echo "📊 === ANALISIS DE CONSISTENCIA DIARIO ==="
        echo "🔄 Adaptado para: Detección de tendencias en ejecución diaria"
        echo "⏱️ Ventana: Últimos 7 días de screening para patrones"
        
        python consistency_analyzer.py
        
        echo "✅ Análisis de consistencia diario completado"
        ls -la consistency_analysis.json consistency_analysis_*.json 2>/dev/null || echo "Verificando archivos de consistencia..."
      env:
        PYTHONUNBUFFERED: 1

    - name: 2.1. Crear archivo histórico de consistencia diaria
      run: |
        echo "🔧 Creando archivo histórico de consistencia diaria..."
        DATE_STAMP=$(date +%Y%m%d)
        
        if [ -f "consistency_analysis.json" ]; then
          cp consistency_analysis.json "consistency_analysis_${DATE_STAMP}.json"
          echo "✅ Archivo histórico creado: consistency_analysis_${DATE_STAMP}.json"
          ls -la consistency_analysis_${DATE_STAMP}.json
        else
          echo "❌ No se puede crear histórico - archivo principal no existe"
        fi
        
    - name: 3. Recomendaciones optimizadas para trades mensuales
      run: |
        echo "💡 === RECOMENDACIONES PARA TRADES MENSUALES ==="
        echo "🎯 Filosofía: Trades de ~1 mes con criterios estrictos de rotación"
        echo "⚠️ Solo rotar cuando:"
        echo "   - Posición cerca del stop loss (2-3%)"
        echo "   - Sin momentum por 3+ días consecutivos" 
        echo "   - Oportunidad 30+ puntos superior"
        echo "   - Deterioro fundamental"
        
        python rotation_recommender.py
        
        echo "✅ Recomendaciones mensuales generadas"
        ls -la rotation_recommendations.json rotation_recommendations_*.json 2>/dev/null || echo "Verificando recomendaciones..."
      env:
        PYTHONUNBUFFERED: 1

    - name: 3.1. Crear archivo histórico de recomendaciones diarias
      run: |
        echo "🔧 Creando archivo histórico de recomendaciones diarias..."
        DATE_STAMP=$(date +%Y%m%d)
        
        if [ -f "rotation_recommendations.json" ]; then
          cp rotation_recommendations.json "rotation_recommendations_${DATE_STAMP}.json"
          echo "✅ Archivo histórico creado: rotation_recommendations_${DATE_STAMP}.json"
          ls -la rotation_recommendations_${DATE_STAMP}.json
        else
          echo "❌ No se puede crear histórico - archivo principal no existe"
        fi
        
    - name: 4. Generar reporte diario optimizado
      run: |
        echo "📋 === GENERANDO REPORTE DIARIO ==="
        echo "📅 Tipo: Daily Market Analysis + Monthly Trading Recommendations"
        
        python create_weekly_report.py
        
        echo "✅ Reporte diario generado"
        ls -la ENHANCED_WEEKLY_REPORT_*.md docs/data.json 2>/dev/null || echo "Verificando reporte y dashboard..."
      env:
        PYTHONUNBUFFERED: 1
        
    - name: 5. Generar mensaje de commit inteligente para ejecución diaria
      run: |
        echo "📝 === GENERANDO COMMIT MESSAGE DIARIO ==="
        
        # Crear mensaje específico para ejecución diaria
        cat > commit_message.txt << 'EOF'
🔄 Daily Analysis: MA50 Bonus System + Monthly Trading Focus

📅 Execution: Daily monitoring for ~1 month trades
🌟 MA50 Bonus: +22pts for bullish rebounds  
🎯 Philosophy: Daily screening, monthly rotation criteria
⚡ Features: Weekly ATR + Strict rotation thresholds
🕘 Schedule: Mon-Fri 9:00 AM Spain (post-EU open)

📊 Daily Stats:
- Screening: Conservative momentum with MA50 priority
- Consistency: 7-day pattern detection
- Recommendations: Only high-conviction rotations
- Target: 1-month holds with daily exit management

🔧 Optimizations Applied:
- MA50 stop loss bonus system
- Daily execution frequency  
- Reduced rotation frequency
- Enhanced risk management

[Daily Conservative Analysis $(date +%Y-%m-%d)]
EOF

        echo "=== MENSAJE DE COMMIT DIARIO GENERADO ==="
        cat commit_message.txt
        echo "================================="
      env:
        PYTHONUNBUFFERED: 1
        
    - name: Configurar Git para commits diarios automáticos
      run: |
        git config --global user.name 'Daily Conservative Bot'
        git config --global user.email 'actions@github.com'
        
    - name: 6. Commit diario con gestión histórica optimizada
      run: |
        echo "=== 🔧 INICIANDO COMMIT DIARIO ==="
        
        # Añadir archivos principales del día
        echo "📁 Añadiendo archivos principales del análisis diario..."
        git add weekly_screening_results.json || echo "Skip weekly_screening_results.json"
        git add consistency_analysis.json || echo "Skip consistency_analysis.json"  
        git add rotation_recommendations.json || echo "Skip rotation_recommendations.json"
        git add docs/data.json || echo "Skip docs/data.json"
        
        # Añadir archivos históricos diarios
        echo "📚 Añadiendo archivos históricos diarios..."
        git add weekly_screening_results_*.json || echo "No historic screening files"
        git add consistency_analysis_*.json || echo "No historic consistency files"
        git add rotation_recommendations_*.json || echo "No historic rotation files"
        git add ENHANCED_WEEKLY_REPORT_*.md || echo "No historic reports"
        git add momentum_responsive_results_*.json || echo "No momentum files"
        
        echo "=== 🔍 VERIFICANDO ARCHIVOS DIARIOS AÑADIDOS ==="
        git status --porcelain
        STAGED_FILES=$(git status --porcelain | wc -l)
        echo "Archivos en staging: $STAGED_FILES"
        
        if [ $STAGED_FILES -eq 0 ]; then
          echo "🚨 AÑADIENDO TODOS LOS ARCHIVOS DIARIOS"
          git add --all
          git status --porcelain
          STAGED_FILES_ALL=$(git status --porcelain | wc -l)
          echo "Archivos después de --all: $STAGED_FILES_ALL"
        fi
        
        echo "=== 📝 REALIZANDO COMMIT DIARIO ==="
        FINAL_STAGED=$(git status --porcelain | wc -l)
        if [ $FINAL_STAGED -gt 0 ]; then
          git commit -F commit_message.txt
          
          echo "=== 🚀 PUSHING CAMBIOS DIARIOS ==="
          git push
          echo "✅ SUCCESS: Análisis diario commiteado correctamente"
          
          echo "=== 📋 RESUMEN DE ARCHIVOS DIARIOS COMMITEADOS ==="
          git show --name-only --pretty=format: HEAD | sort | head -15
        else
          echo "❌ CRITICAL: No hay archivos para commitear en análisis diario"
          exit 1
        fi
        
    - name: Configurar GitHub Pages
      uses: actions/configure-pages@v5
      
    - name: Subir artefactos para Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Desplegar a GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: 7. Resumen final del análisis diario
      run: |
        echo "🎉 ===== ANÁLISIS DIARIO COMPLETADO ====="
        echo "🕐 Iniciado: $ANALYSIS_START_TIME UTC"
        echo "🕐 Finalizado: $(date -u +%H:%M) UTC"
        echo "📅 Fecha: $(date +%Y-%m-%d)"
        echo ""
        echo "📊 ARCHIVOS DIARIOS GENERADOS:"
        ls -la *.json *.md 2>/dev/null | grep -E "(weekly_screening_results\.json|consistency_analysis\.json|rotation_recommendations\.json|ENHANCED_WEEKLY_REPORT_*.md)" || echo "Sin archivos principales"
        echo ""
        echo "🔄 CONFIGURACIÓN DIARIA APLICADA:"
        echo "🌟 MA50 Bonus System: +22pts por rebote alcista"
        echo "📅 Frecuencia: Lunes-Viernes 9:00 AM España"
        echo "🎯 Filosofía: Trades de ~1 mes con monitorización diaria"
        echo "⚠️ Rotaciones: Solo con criterios estrictos"
        echo ""
        echo "📚 GESTIÓN HISTÓRICA DIARIA:"
        TOTAL_HISTORICAL=$(ls *_*.json ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | wc -l)
        echo "📁 Total archivos históricos: $TOTAL_HISTORICAL"
        echo ""
        if [ $TOTAL_HISTORICAL -gt 0 ]; then
          echo "📋 Archivos históricos recientes (últimos 5):"
          ls -lt *_*.json ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | head -5
        fi
        echo ""
        echo "🌐 DASHBOARD: ${{ steps.deployment.outputs.page_url }}"
        echo ""
        echo "📈 PRÓXIMAS EJECUCIONES:"
        echo "🔄 Próxima ejecución: Lunes-Viernes 9:00 AM España"
        echo "⚡ Ejecución manual disponible en Actions tab"
        echo "🎯 Sistema: Optimizado para trades mensuales con gestión diaria"
        echo "🌟 Bonus MA50: Sistema implementado y funcionando"
        echo "=============================================="
      env:
        PYTHONUNBUFFERED: 1