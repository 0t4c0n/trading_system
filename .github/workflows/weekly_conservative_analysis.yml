# .github/workflows/daily_conservative_analysis.yml
name: Daily Conservative Stock Analysis with MA50 Bonus

on:
  schedule:
    # Lunes a viernes a las 9:00 AM Espana (8:00 UTC)
    - cron: '0 8 * * 1-5'
  workflow_dispatch:  # Permitir ejecucion manual

# PERMISOS NECESARIOS PARA GITHUB PAGES Y COMMITS
permissions:
  contents: write
  pages: write
  id-token: write

# Asegurar que solo un workflow corra a la vez
concurrency:
  group: "daily-conservative-analysis"
  cancel-in-progress: false

jobs:
  daily-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 horas para analisis completo diario
    
    # Configurar entorno para GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: "Checkout codigo"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Historial completo para analisis de consistencia
        
    - name: "Configurar Python"
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: "Cache dependencies optimizado para ejecucion diaria"
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-daily-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-daily-
          ${{ runner.os }}-pip-
        
    - name: "Instalar dependencias"
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: "Verificar configuracion y estado historico diario"
      run: |
        echo "Verificando configuracion para ejecucion diaria..."
        if [ ! -f "current_portfolio.json" ]; then
          echo "ERROR: current_portfolio.json no encontrado"
          exit 1
        fi
        echo "Portfolio configurado para monitorizacion diaria"
        
        # Verificar archivos historicos recientes (ultimos 7 dias)
        echo "Archivos del historial diario (ultimos 7 dias):"
        find . -name "*_*.json" -mtime -7 2>/dev/null | grep -E "(weekly_screening_results_|consistency_analysis_|rotation_recommendations_)" | head -10 || echo "   Iniciando historial diario"
        
        echo "MODO: Ejecucion diaria para trades de 1 mes"
        echo "OBJETIVO: Monitorizar oportunidades sin rotacion excesiva"
        echo "HORARIO: L-V 9:00 AM Espana (post-apertura europea)"
      env:
        PYTHONUNBUFFERED: 1
        
    - name: "Configurar variables de entorno para analisis diario"
      run: |
        echo "REPORT_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
        echo "ANALYSIS_START_TIME=$(date -u +%H:%M)" >> $GITHUB_ENV
        echo "ENHANCED_MODE=true" >> $GITHUB_ENV
        echo "DAILY_MODE=true" >> $GITHUB_ENV
        echo "AUTO_HISTORY=true" >> $GITHUB_ENV
        echo "EXECUTION_FREQUENCY=daily" >> $GITHUB_ENV
        
    - name: "1. Screening diario con bonus MA50"
      run: |
        echo "Screening diario con bonus MA50..."
        echo "Sistema: MA50 priority con +22 puntos por rebote alcista"
        echo "Frecuencia: Diaria (L-V 9:00 AM Espana)"
        echo "Objetivo: Trades de 1 mes con gestion diaria de exits"
        
        echo "Ejecutando conservative_screener.py..."
        python conservative_screener.py
        
        echo "Verificando archivos generados..."
        if [ ! -f "weekly_screening_results.json" ]; then
          echo "ERROR: weekly_screening_results.json no fue generado"
          echo "Listando archivos actuales:"
          ls -la *.json 2>/dev/null || echo "No hay archivos JSON"
          exit 1
        fi
        
        echo "SUCCESS: Screening completado y archivo generado"
        ls -la weekly_screening_results.json
      env:
        PYTHONUNBUFFERED: 1

    - name: "1.1. Crear archivo historico de screening diario"
      run: |
        echo "Creando archivo historico de screening diario..."
        DATE_STAMP=$(date +%Y%m%d)
        
        if [ -f "weekly_screening_results.json" ]; then
          cp weekly_screening_results.json "weekly_screening_results_${DATE_STAMP}.json"
          echo "Archivo historico creado: weekly_screening_results_${DATE_STAMP}.json"
          ls -la weekly_screening_results_${DATE_STAMP}.json
        else
          echo "No se puede crear historico - archivo principal no existe"
        fi
        
    - name: "2. Analisis de consistencia adaptado para ejecucion diaria"
      run: |
        echo "Analisis de consistencia diario..."
        echo "Adaptado para: Deteccion de tendencias en ejecucion diaria"
        echo "Ventana: Ultimos 7 dias de screening para patrones"
        
        echo "Ejecutando consistency_analyzer.py..."
        python consistency_analyzer.py
        
        echo "Verificando archivos generados..."
        if [ ! -f "consistency_analysis.json" ]; then
          echo "ERROR: consistency_analysis.json no fue generado"
          echo "Listando archivos actuales:"
          ls -la *.json 2>/dev/null || echo "No hay archivos JSON"
          exit 1
        fi
        
        echo "SUCCESS: Analisis de consistencia completado y archivo generado"
        ls -la consistency_analysis.json
      env:
        PYTHONUNBUFFERED: 1

    - name: "2.1. Crear archivo historico de consistencia diaria"
      run: |
        echo "Creando archivo historico de consistencia diaria..."
        DATE_STAMP=$(date +%Y%m%d)
        
        if [ -f "consistency_analysis.json" ]; then
          cp consistency_analysis.json "consistency_analysis_${DATE_STAMP}.json"
          echo "Archivo historico creado: consistency_analysis_${DATE_STAMP}.json"
          ls -la consistency_analysis_${DATE_STAMP}.json
        else
          echo "No se puede crear historico - archivo principal no existe"
        fi
        
    - name: "3. Recomendaciones optimizadas para trades mensuales"
      run: |
        echo "Recomendaciones para trades mensuales..."
        echo "Filosofia: Trades de 1 mes con criterios estrictos de rotacion"
        echo "Solo rotar cuando:"
        echo "   - Posicion cerca del stop loss (2-3%)"
        echo "   - Sin momentum por 3+ dias consecutivos" 
        echo "   - Oportunidad 30+ puntos superior"
        echo "   - Deterioro fundamental"
        
        echo "Ejecutando rotation_recommender.py..."
        python rotation_recommender.py
        
        echo "Verificando archivos generados..."
        if [ ! -f "rotation_recommendations.json" ]; then
          echo "ERROR: rotation_recommendations.json no fue generado"
          echo "Listando archivos actuales:"
          ls -la *.json 2>/dev/null || echo "No hay archivos JSON"
          exit 1
        fi
        
        echo "SUCCESS: Recomendaciones generadas y archivo creado"
        ls -la rotation_recommendations.json
      env:
        PYTHONUNBUFFERED: 1

    - name: "3.1. Crear archivo historico de recomendaciones diarias"
      run: |
        echo "Creando archivo historico de recomendaciones diarias..."
        DATE_STAMP=$(date +%Y%m%d)
        
        if [ -f "rotation_recommendations.json" ]; then
          cp rotation_recommendations.json "rotation_recommendations_${DATE_STAMP}.json"
          echo "Archivo historico creado: rotation_recommendations_${DATE_STAMP}.json"
          ls -la rotation_recommendations_${DATE_STAMP}.json
        else
          echo "No se puede crear historico - archivo principal no existe"
        fi
        
    - name: "4. Generar reporte diario optimizado"
      run: |
        echo "Generando reporte diario..."
        echo "Tipo: Daily Market Analysis + Monthly Trading Recommendations"
        
        echo "Ejecutando create_weekly_report.py..."
        python create_weekly_report.py
        
        echo "Verificando archivos generados..."
        if [ ! -f "docs/data.json" ]; then
          echo "ERROR: docs/data.json no fue generado"
          echo "Verificando directorio docs:"
          ls -la docs/ 2>/dev/null || echo "Directorio docs no existe"
          exit 1
        fi
        
        echo "SUCCESS: Reporte diario y dashboard generados"
        ls -la docs/data.json
        ls -la ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null || echo "Sin reporte markdown (puede ser normal)"
      env:
        PYTHONUNBUFFERED: 1
        
    - name: "5. Verificacion final de archivos generados"
      run: |
        echo "Verificacion final de todos los archivos..."
        
        # Lista de archivos requeridos
        REQUIRED_FILES=(
          "weekly_screening_results.json"
          "consistency_analysis.json"
          "rotation_recommendations.json"
          "docs/data.json"
        )
        
        ALL_OK=true
        
        echo "Verificando archivos principales:"
        for file in "${REQUIRED_FILES[@]}"; do
          if [ -f "$file" ]; then
            SIZE=$(stat -c%s "$file" 2>/dev/null || echo "0")
            echo "  ✓ $file ($SIZE bytes)"
          else
            echo "  ✗ $file (FALTA)"
            ALL_OK=false
          fi
        done
        
        echo ""
        echo "Archivos opcionales:"
        ls -la ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | head -3 || echo "  Sin reportes markdown"
        ls -la momentum_responsive_results_*.json 2>/dev/null | head -3 || echo "  Sin archivos momentum"
        
        echo ""
        echo "Todos los archivos JSON en directorio:"
        ls -la *.json 2>/dev/null || echo "  No hay archivos JSON"
        
        if [ "$ALL_OK" = false ]; then
          echo ""
          echo "ERROR: Faltan archivos requeridos. No se puede continuar con commit."
          exit 1
        fi
        
        echo ""
        echo "SUCCESS: Todos los archivos principales generados correctamente"
      env:
        PYTHONUNBUFFERED: 1
        
    - name: "5.1. Generar mensaje de commit inteligente para ejecucion diaria"
      run: |
        echo "Generando commit message diario..."
        
        # Crear mensaje específico para ejecución diaria
        cat > commit_message.txt << EOF
        Daily Analysis: MA50 Bonus System + Monthly Trading Focus
        
        Execution: Daily monitoring for 1 month trades
        MA50 Bonus: +22pts for bullish rebounds  
        Philosophy: Daily screening, monthly rotation criteria
        Features: Weekly ATR + Strict rotation thresholds
        Schedule: Mon-Fri 9:00 AM Spain (post-EU open)
        
        Daily Stats:
        - Screening: Conservative momentum with MA50 priority
        - Consistency: 7-day pattern detection
        - Recommendations: Only high-conviction rotations
        - Target: 1-month holds with daily exit management
        
        Optimizations Applied:
        - MA50 stop loss bonus system
        - Daily execution frequency  
        - Reduced rotation frequency
        - Enhanced risk management
        
        [Daily Conservative Analysis \$(date +%Y-%m-%d)]
        EOF

        echo "Commit message generado correctamente"
        cat commit_message.txt
      env:
        PYTHONUNBUFFERED: 1
        
    - name: "Configurar Git para commits diarios automaticos"
      run: |
        git config --global user.name 'Daily Conservative Bot'
        git config --global user.email 'actions@github.com'
        
    - name: "6. Debug y diagnostico del entorno"
      run: |
        echo "Informacion del entorno para debugging..."
        
        echo "Python version:"
        python --version
        
        echo "Pip packages instalados:"
        pip list | grep -E "(yfinance|pandas|numpy|requests)"
        
        echo "Conectividad a Yahoo Finance:"
        python -c "
        import yfinance as yf
        try:
            spy = yf.Ticker('SPY')
            data = spy.history(period='5d')
            print(f'✓ Yahoo Finance OK: {len(data)} dias de datos SPY')
        except Exception as e:
            print(f'✗ Error Yahoo Finance: {e}')
        "
        
        echo "Conectividad a NASDAQ API:"
        python -c "
        import requests
        try:
            url = 'https://api.nasdaq.com/api/screener/stocks'
            headers = {'User-Agent': 'Mozilla/5.0'}
            params = {'tableonly': 'true', 'limit': '10', 'exchange': 'NYSE'}
            resp = requests.get(url, headers=headers, params=params, timeout=10)
            print(f'✓ NASDAQ API OK: Status {resp.status_code}')
        except Exception as e:
            print(f'✗ Error NASDAQ API: {e}')
        "
        
        echo "Archivos actuales en directorio:"
        ls -la *.json *.py 2>/dev/null || echo "Sin archivos relevantes"
        
        echo "Espacio en disco:"
        df -h . | head -2
        
      env:
        PYTHONUNBUFFERED: 1
        
    - name: "7. Commit diario con gestion historica optimizada"
      run: |
        echo "Iniciando commit diario..."
        
        # Anadir archivos principales del dia
        echo "Anadiendo archivos principales del analisis diario..."
        git add weekly_screening_results.json || echo "Skip weekly_screening_results.json"
        git add consistency_analysis.json || echo "Skip consistency_analysis.json"  
        git add rotation_recommendations.json || echo "Skip rotation_recommendations.json"
        git add docs/data.json || echo "Skip docs/data.json"
        
        # Anadir archivos historicos diarios
        echo "Anadiendo archivos historicos diarios..."
        git add weekly_screening_results_*.json || echo "No historic screening files"
        git add consistency_analysis_*.json || echo "No historic consistency files"
        git add rotation_recommendations_*.json || echo "No historic rotation files"
        git add ENHANCED_WEEKLY_REPORT_*.md || echo "No historic reports"
        git add momentum_responsive_results_*.json || echo "No momentum files"
        
        echo "Verificando archivos diarios anadidos..."
        git status --porcelain
        STAGED_FILES=$(git status --porcelain | wc -l)
        echo "Archivos en staging: $STAGED_FILES"
        
        if [ $STAGED_FILES -eq 0 ]; then
          echo "Anadiendo todos los archivos diarios..."
          git add --all
          git status --porcelain
          STAGED_FILES_ALL=$(git status --porcelain | wc -l)
          echo "Archivos despues de --all: $STAGED_FILES_ALL"
        fi
        
        echo "Realizando commit diario..."
        FINAL_STAGED=$(git status --porcelain | wc -l)
        if [ $FINAL_STAGED -gt 0 ]; then
          git commit -F commit_message.txt
          
          echo "Pushing cambios diarios..."
          git push
          echo "SUCCESS: Analisis diario commiteado correctamente"
          
          echo "Resumen de archivos diarios commiteados:"
          git show --name-only --pretty=format: HEAD | sort | head -15
        else
          echo "WARNING: No hay archivos para commitear"
          echo "Esto indica que todos los scripts fallaron en generar archivos"
          echo "Verificando nuevamente archivos principales:"
          for file in "weekly_screening_results.json" "consistency_analysis.json" "rotation_recommendations.json" "docs/data.json"; do
            if [ -f "$file" ]; then
              echo "  ✓ $file existe"
            else
              echo "  ✗ $file falta"
            fi
          done
          echo "ERROR: No se pudieron generar los archivos necesarios"
          exit 1
        fi
        
    - name: "Configurar GitHub Pages"
      uses: actions/configure-pages@v5
      
    - name: "Subir artefactos para Pages"
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: "Desplegar a GitHub Pages"
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: "9. Resumen final del analisis diario"
      run: |
        echo "Analisis diario completado"
        echo "Iniciado: $ANALYSIS_START_TIME UTC"
        echo "Finalizado: $(date -u +%H:%M) UTC"
        echo "Fecha: $(date +%Y-%m-%d)"
        echo ""
        echo "Archivos diarios generados:"
        ls -la *.json *.md 2>/dev/null | grep -E "(weekly_screening_results\.json|consistency_analysis\.json|rotation_recommendations\.json|ENHANCED_WEEKLY_REPORT_.*\.md)" || echo "Sin archivos principales"
        echo ""
        echo "Configuracion diaria aplicada:"
        echo "MA50 Bonus System: +22pts por rebote alcista"
        echo "Frecuencia: Lunes-Viernes 9:00 AM Espana"
        echo "Filosofia: Trades de 1 mes con monitorizacion diaria"
        echo "Rotaciones: Solo con criterios estrictos"
        echo ""
        echo "Gestion historica diaria:"
        TOTAL_HISTORICAL=$(ls *_*.json ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | wc -l)
        echo "Total archivos historicos: $TOTAL_HISTORICAL"
        echo ""
        if [ $TOTAL_HISTORICAL -gt 0 ]; then
          echo "Archivos historicos recientes (ultimos 5):"
          ls -lt *_*.json ENHANCED_WEEKLY_REPORT_*.md 2>/dev/null | head -5
        fi
        echo ""
        echo "Dashboard: ${{ steps.deployment.outputs.page_url }}"
        echo ""
        echo "Proximas ejecuciones:"
        echo "Proxima ejecucion: Lunes-Viernes 9:00 AM Espana"
        echo "Ejecucion manual disponible en Actions tab"
        echo "Sistema: Optimizado para trades mensuales con gestion diaria"
        echo "Bonus MA50: Sistema implementado y funcionando"
        echo "=============================================="
      env:
        PYTHONUNBUFFERED: 1